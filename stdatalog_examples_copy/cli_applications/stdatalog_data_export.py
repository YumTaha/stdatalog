#!/usr/bin/env python
# coding: utf-8 
# *****************************************************************************
#  * @file    stdatalog_data_export.py
#  * @author  SRA
# ******************************************************************************
# * @attention
# *
# * Copyright (c) 2022 STMicroelectronics.
# * All rights reserved.
# *
# * This software is licensed under terms that can be found in the LICENSE file
# * in the root directory of this software component.
# * If no LICENSE file comes with this software, it is provided AS-IS.
# *
# *
# ******************************************************************************
#

"""
This script, `stdatalog_data_export.py`, is designed to export data from acquisition folders
generated by STMicroelectronics' HSDatalog tool in different formats (TXT, CSV, TSV, PARQUET).
It supports various options for customizing the data export, including selecting specific
sensors, setting time ranges, exporting raw data, including annotations and more.
It uses Click for command-line interface options and logs information and errors during execution.
The script can be run from the command line with various options to tailor the data export
to the user's needs.

Key Features:
- Export data for specific sensors or all active components.
- Set start and end times for the data export.
- Option to export raw data.
- Include annotations in the exported data.
- Filter data by tag labels.
- Specify the size of each data chunk to be processed.
- Export data in different formats (TXT, CSV, TSV, PARQUET, HDF5(*)).
    -- HSDF5 format:
        - acquisition_metadata group: Contains the acquisition information (9 attributes)
            - tags group: [Optional] Contains the acquisition tag list (start_time, end_time, tag_label)
        - device_metadata group: Contains the device information (8 attributes)
        - firmware_metadata group: Contains the firmware information (7 attributes)
        - sensor_data group: Contains the sensor data (one group per sensor)
            - sensor_name group: Contains the sensor data (N + 1 datasets: N x axis_data, 1 x timestamps, a list of sensor-category specific attributes)
- Upload and use a custom Device Template Model (DTDL).
- Enable debug mode to check for corrupted data and timestamps.

(*) NOTE for HDF5 format:
    - To view the contents of an HDF5 file, you can:
        -- Use the `stdatalog_hdf5_viewer.py` script provided in the SDK stdatalog_examples/cli_applications folder.
        -- If you are a VSCode user, you can install the `HDF5 Viewer` extension to view the contents of an HDF5 file directly in the editor.
        -- Use an online HDF5 file viewing service with more features, please refer to https://myhdf5.hdfgroup.org/
"""

import sys
import os

# Add the STDatalog SDK root directory to the sys.path to access the SDK packages
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

import click
from stdatalog_core.HSD_utils.dtm import HSDatalogDTM
from stdatalog_core.HSD_utils.exceptions import DataCorruptedException, MissingDeviceModelError, MissingTagsException, MissingISPUOutputDescriptorException
import stdatalog_core.HSD_utils.logger as logger
from stdatalog_core.HSD.HSDatalog import HSDatalog

# Set up the application logger with a specified log file
log = logger.setup_applevel_logger(is_debug = False, file_name= "app_debug.log")

# Define the script version for display with the version option
script_version = "1.0.0"

# Define a callback function to show help information and script execution examples
def show_help(ctx, param, value):
    # Check if the help flag is set and the context is not in resilient parsing mode
    if value and not ctx.resilient_parsing:
        # Display the help information for the command
        click.secho(ctx.get_help(), color=ctx.color)
        # Display examples of script execution
        click.secho("\n-> Script execution examples:")
        # Example: Export data for a specific acquisition folder
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path", fg='cyan')
        # Example: Export data for all sensors and include annotations in the exported data
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s all -l", fg='cyan')
        # Example: Export data for a specific sensor in TSV format and use raw data
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -f TSV -r", fg='cyan')
        # Example: Export data to a specified output folder
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -o Output_Folder_Path", fg='cyan')
        # Example: Export data for all sensors to CSV format
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s all -f CSV", fg='cyan')
        # Example: Export data for a specific sensor with raw data included
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -r", fg='cyan')
        # Example: Export data for a specific sensor with a custom device model
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -cdm BOARD_ID FW_ID custom_model.json", fg='cyan')
        # Example: Export data for a specific sensor with annotations and without timestamps
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -l -nt", fg='cyan')
        # Example: Export data for a specific sensor to TSV format, with a specified chunk size
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -f TSV -cs 500000", fg='cyan')
        # Example: Export data for a specific sensor with a start and end time
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -st 100 -et 200", fg='cyan')
        # Example: Export data for a specific sensor with specified tag labels
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -s SENSOR_NAME -tl TAG_LABEL_1 TAG_LABEL_2 TAG_LABEL_3", fg='cyan')
        # Example: Export data to a specified output folder
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -o Output_Folder_Path", fg='cyan')
        # Example: Run the script in debug mode to check for corrupted data and timestamps
        click.secho("   python stdatalog_data_export.py Acquisition_Folder_Path -d", fg='cyan')
        ctx.exit()

# Define the click command with options for the data export script
@click.command()
@click.argument('acq_folder', type=click.Path(exists=True))
@click.option('-o', '--output_folder', help="Output folder (this will be created if it doesn't exist)")
@click.option('-f', '--file_format', help="Exported file format", type=click.Choice(['TXT', 'CSV', 'TSV', 'PARQUET', 'HDF5'], case_sensitive=False))
@click.option('-s', '--sensor_name', help="Sensor Name - use \"all\" to extract all active sensors data, otherwise select a specific sensor by name", default='')
@click.option('-st','--start_time', help="Start Time - Data conversion will start from this time (seconds)", type=int, default=0)
@click.option('-et','--end_time', help="End Time - Data conversion will end up in this time (seconds)", type=int, default=-1)
@click.option('-l', '--labeled', is_flag=True, help="Includes annotations taken during acquisition (if any) in the exported data", default=False)
@click.option('-tl', '--tag_labels', multiple=True, help='A list of tag labels strings to filter and include only the corresponding entries in the converted output')
@click.option('-nt','--no_timestamps', help="Enable this option to remove timestamps column in the exported output files", is_flag=True, default=False)
@click.option('-r', '--raw_data', is_flag=True, help="Uses Raw data (not multiplied by sensitivity)", default=False)
@click.option('-cdm','--custom_device_model', help="Upload a custom Device Template Model (DTDL)", type=(int, int, str))
@click.option('-cs', '--chunk_size', help="Specify the size (number of samples) of each data chunk to be processed", default=HSDatalog.DEFAULT_SAMPLES_CHUNK_SIZE)
@click.version_option(script_version, '-v', '--version', prog_name="stdatalog_data_export", is_flag=True, help="stdatalog_data_export tool version number")
@click.option('-d', '--debug', is_flag=True, help="[DEBUG] Check for corrupted data and timestamps", default=False)
@click.option("-h", "--help", is_flag=True, is_eager=True, expose_value=False, callback=show_help, help="Show this message and exit.",)

# Define the main function that will be executed when the script is run
def hsd_data_export(acq_folder, output_folder, file_format, sensor_name, start_time, end_time, labeled, tag_labels, no_timestamps, raw_data, custom_device_model, chunk_size, debug):

    # If a custom device model is provided, upload it using the HSDatalogDTM module
    if custom_device_model is not None:
        HSDatalogDTM.upload_custom_dtm(custom_device_model)

    # Create an instance of the HSDatalog factory
    hsd_factory = HSDatalog()
    try:
        # Create an HSDatalog object for the given acquisition folder
        hsd = hsd_factory.create_hsd(acq_folder)
    except MissingDeviceModelError as error:
        # Handle the case where the device model is missing and log the error
        log.error("Device Template Model identifyed by [{}] not supported".format(error))
        log.info("Check your input acquisition folder, then try to upload a custom Device Template Model using -cdm flag".format(error))
        return
    
    # Set the default file format if not specified
    if file_format is None:
        file_format = "CSV"

    # Process tag labels if provided as selection filter
    which_tags = []
    if len(tag_labels) > 0:
        which_tags = list(tag_labels)
        labeled = True
    
    # Set the default output folder if not specified
    output_folder = acq_folder + "_Exported" if output_folder is None else output_folder
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Enable timestamp recovery if debug mode is on
    hsd.enable_timestamp_recovery(debug)

    # Main loop to process data export by tags
    df_flag = True
    while df_flag:
        # If no sensor name is provided, ask the user to select a component
        if sensor_name == '':
            component = HSDatalog.ask_for_component(hsd, only_active=True)
            # If a component is selected, convert its data
            if component is not None:
                convert_data(hsd, component, start_time, end_time, acq_folder, labeled, output_folder, file_format, which_tags, no_timestamps, raw_data, chunk_size)
            else:
                break
        # If 'all' is specified for sensor name, process all active components
        elif sensor_name == 'all':
            component_list = HSDatalog.get_all_components(hsd, only_active=True)
            if file_format.upper() == "HDF5":
                convert_data(hsd, component_list, start_time, end_time, acq_folder, labeled, output_folder, file_format, which_tags, no_timestamps, raw_data, chunk_size)
            else:
                for component in component_list:
                    convert_data(hsd, component, start_time, end_time, acq_folder, labeled, output_folder, file_format, which_tags, no_timestamps, raw_data, chunk_size)
            df_flag = False
        # If a specific sensor name is provided, process only that component
        else:
            component = HSDatalog.get_component(hsd, sensor_name)
            if component is not None:
                convert_data(hsd, component, start_time, end_time, acq_folder, labeled, output_folder, file_format, which_tags, no_timestamps, raw_data, chunk_size)
            else:
                # Log an error if the specified component is not found
                log.error("No \"{}\" Component found in your Device Configuration file.".format(sensor_name))
            df_flag = False

# Define a helper function to convert data
def convert_data(hsd, components, start_time, end_time, acq_folder, labeled, output_folder, file_format, which_tags:list, no_timestamps, raw_data, chunk_size):
    try:
        if file_format == "HDF5":
            # Attempt to convert data to the specified file format (HDF5)
            HSDatalog.convert_acquisition_to_hdf5(hsd, components, start_time, end_time, labeled, output_folder, raw_data, which_tags, no_timestamps, chunk_size)
        else:
            # Attempt to convert data to the specified file format (TXT, CSV, TSV, PARQUET or HDF5)
            HSDatalog.convert_dat_to_xsv(hsd, components, start_time, end_time, labeled, raw_data, output_folder, file_format, which_tags, no_timestamps, chunk_size)
    except MissingTagsException as tags_err:
        # Handle missing tags exception
        log.error(tags_err)
        log.warning("Check \"tags\" field in your acquisition_info.json file (AcquisitionInfo.json for HSDv1 acquisitions)")
        quit()
    except MissingISPUOutputDescriptorException as ispu_err:
        # Handle missing ISPU output descriptor exception
        log.error(ispu_err)
        log.warning("Copy the right ISPU output descriptor file in your \"{}\" acquisition folder renamed as \"ispu_output_format.json\"".format(acq_folder))
    except DataCorruptedException as data_err:
        # Handle corrupted data exception
        log.error(data_err)
        log.warning("Check your acquisition folder for corrupted data files")
    except Exception as err:
        log.exception(err)

if __name__ == '__main__':
    # Execute the main function
    hsd_data_export()